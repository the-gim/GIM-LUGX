name: GIM-LUGX Frontend & Analytics CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours for reliability testing

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: lugx-gaming-cluster
  ECR_REPOSITORY: lugx-gaming
  NAMESPACE: default

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install and test frontend
        run: |
          cd frontend && npm ci && npm test
          
      - name: Install and test analytics
        run: |
          cd analytics && npm ci && npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build gim-web frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:gim-web-$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:gim-web-$IMAGE_TAG
          
          # Build analytics service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:analytics-$IMAGE_TAG ./analytics
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:analytics-$IMAGE_TAG
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
          
      - name: Deploy to default namespace (Rolling Update - 100% Uptime)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Rolling update gim-web (your main frontend)
          kubectl set image deployment/gim-web gim-web=$ECR_REGISTRY/$ECR_REPOSITORY:gim-web-$IMAGE_TAG -n default
          
          # Rolling update analytics service
          kubectl set image deployment/analytics-service analytics-service=$ECR_REGISTRY/$ECR_REPOSITORY:analytics-$IMAGE_TAG -n default
          
          # Wait for rollout to complete (ensures 100% uptime)
          kubectl rollout status deployment/gim-web -n default --timeout=300s
          kubectl rollout status deployment/analytics-service -n default --timeout=300s
          
      - name: Run post-deployment integration tests
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=gim-web -n default --timeout=120s
          kubectl wait --for=condition=ready pod -l app=analytics-service -n default --timeout=120s
          
          # Test external endpoints (your actual URLs)
          echo "Testing gim-web frontend..."
          curl -f http://a25a76fe6455041279d5f509a4b9354d-1497309566.us-east-1.elb.amazonaws.com/index.html || exit 1
          
          echo "Testing analytics service..."
          curl -f http://a0f7c39f3b74a41578b5cf9b0652594f-1229274504.us-east-1.elb.amazonaws.com:8080/health || exit 1
          
          # Test ClickHouse connectivity
          kubectl exec -n default $(kubectl get pods -n default -l app=clickhouse -o jsonpath='{.items[0].metadata.name}') -- clickhouse-client --query="SELECT 1" || exit 1
          
          # Test analytics data flow
          echo "Testing analytics data collection..."
          curl -X POST -H "Content-Type: application/json" \
            -d '{"event_type":"test","page_url":"/ci-cd-test","user_id":"ci-cd-user"}' \
            http://a0f7c39f3b74a41578b5cf9b0652594f-1229274504.us-east-1.elb.amazonaws.com:8080/api/analytics/track || exit 1
          
          echo "All frontend services tested successfully!"
          
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back to previous version..."
          kubectl rollout undo deployment/gim-web -n default
          kubectl rollout undo deployment/analytics-service -n default
          
          # Wait for rollback to complete
          kubectl rollout status deployment/gim-web -n default --timeout=300s
          kubectl rollout status deployment/analytics-service -n default --timeout=300s
          
          echo "Rollback completed"

  periodic-reliability-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Run comprehensive system reliability tests
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
          
          echo "=== Lugx Gaming System Reliability Test ==="
          echo "Test Time: $(date)"
          
          # Test all external services
          echo "Testing Frontend (gim-web)..."
          curl -f http://a25a76fe6455041279d5f509a4b9354d-1497309566.us-east-1.elb.amazonaws.com/index.html || exit 1
          
          echo "Testing Analytics Service..."
          curl -f http://a0f7c39f3b74a41578b5cf9b0652594f-1229274504.us-east-1.elb.amazonaws.com:8080/health || exit 1
          
          echo "Testing Game Service..."
          curl -f http://ad55a81de5ebc46dda3c984a9834e514-1703699134.us-east-1.elb.amazonaws.com:3001/health || exit 1
          
          echo "Testing Order Service..."
          curl -f http://af120382ec4b946fa97575e61bba0e4f-128289655.us-east-1.elb.amazonaws.com:3003/health || exit 1
          
          echo "Testing ClickHouse..."
          curl -f http://acfc5e0349f8f4ff4955f1b0ce258b29-1078777489.us-east-1.elb.amazonaws.com:8123/ping || exit 1
          
          echo "Testing Superset..."
          curl -f http://a05a68f34ebb949b0a870af0faf9a3f6-1676157765.us-east-1.elb.amazonaws.com:8088/health || exit 1
          
          echo "Testing Grafana..."
          curl -f http://a9f578bc6ebc14df5b208a71485a6b15-937075388.us-east-1.elb.amazonaws.com:3000/api/health || exit 1
          
          echo "Testing Prometheus..."
          curl -f http://aa4407cb01563486a8563e0693cae75a-923439877.us-east-1.elb.amazonaws.com:9090/-/healthy || exit 1
          
          # Test database connectivity
          echo "Testing ClickHouse Database..."
          kubectl exec -n default $(kubectl get pods -n default -l app=clickhouse -o jsonpath='{.items[0].metadata.name}') -- clickhouse-client --query="SELECT COUNT(*) FROM analytics.analytics_events;" || exit 1
          
          echo "Testing PostgreSQL Database..."
          kubectl exec -n lugx-gaming $(kubectl get pods -n lugx-gaming -l app=postgres -o jsonpath='{.items[0].metadata.name}') -- psql -U postgres -d lugx_gaming -c "SELECT COUNT(*) FROM games;" || exit 1
          
          # Test end-to-end functionality
          echo "Testing End-to-End Game Creation..."
          GAME_RESPONSE=$(curl -X POST -H "Content-Type: application/json" \
            -d '{"name":"Reliability Test Game","category":"Test","price":1.99,"release_date":"2024-01-01"}' \
            http://ad55a81de5ebc46dda3c984a9834e514-1703699134.us-east-1.elb.amazonaws.com:3001/api/games)
          echo "Game created: $GAME_RESPONSE"
          
          echo "=== All Systems Operational! ==="
          
      - name: Notify on reliability test failure
        if: failure()
        run: |
          echo "ALERT: Lugx Gaming system reliability test failed at $(date)"
          echo "Manual investigation required!"